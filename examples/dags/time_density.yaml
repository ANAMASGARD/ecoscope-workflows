get_subjectgroup_observations:
  server:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='URL for EarthRanger API'))
  username:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='EarthRanger username'))
  password:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='EarthRanger password'))
  tcp_limit:   # (<class 'int'>, FieldInfo(annotation=NoneType, required=True, description='TCP limit for EarthRanger API requests'))
  sub_page_size:   # (<class 'int'>, FieldInfo(annotation=NoneType, required=True, description='Sub page size for EarthRanger API requests'))
  subject_group_name:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Name of EarthRanger Subject'))
  include_inactive:   # (<class 'bool'>, FieldInfo(annotation=NoneType, required=True, description='Whether or not to include inactive subjects'))
  since:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='Start date'))
  until:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=True, description='End date'))
  return:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.io.SubjectGroupObservationsGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
process_relocations:
  observations:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.io.SubjectGroupObservationsGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
  filter_point_coords:   # (list[list[float]], FieldInfo(annotation=NoneType, required=True))
  relocs_columns:   # (list[str], FieldInfo(annotation=NoneType, required=True))
  return:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.preprocessing.RelocationsGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
relocations_to_trajectory:
  min_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_length_meters:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_time_secs:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  max_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  min_speed_kmhr:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=True))
  relocations:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.preprocessing.RelocationsGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
  return:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.preprocessing.TrajectoryGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
calculate_time_density:
  pixel_size:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=250.0, description='Pixel size for raster profile.'))
  crs:   # (<class 'str'>, FieldInfo(annotation=NoneType, required=False, default='ESRI:102022'))
  nodata_value:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=nan, metadata=[_PydanticGeneralMetadata(allow_inf_nan=True)]))
  band_count:   # (<class 'int'>, FieldInfo(annotation=NoneType, required=False, default=1))
  max_speed_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.05))
  expansion_factor:   # (<class 'float'>, FieldInfo(annotation=NoneType, required=False, default=1.3))
  percentiles:   # (list[float], FieldInfo(annotation=NoneType, required=False, default=[50.0, 60.0, 70.0, 80.0, 90.0, 95.0]))
  trajectory_gdf:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.preprocessing.TrajectoryGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
  return:   # (pandera.typing.pandas.DataFrame[ecoscope_workflows.tasks.python.analysis.TimeDensityReturnGDFSchema], WithJsonSchema(json_schema={'type': 'ecoscope.distributed.types.DataFrame'}, mode=None))
