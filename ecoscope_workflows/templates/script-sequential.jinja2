{%- if testing %}
# -------------------------START MOCKING IMPORTS-----------------------------
# This code was generated in a testing context that specified certain functions
# shoud be mocked. The following block is included to permit generation of mocks.
from typing import Protocol, TYPE_CHECKING
from unittest.mock import create_autospec

if TYPE_CHECKING:
    class mock_distributed_task(Protocol):
        def replace(validate: bool): ...
# --------------------------END MOCKING IMPORTS------------------------------
{% endif %}

import argparse
import yaml

{% for t in tasks -%}
{{ t.known_task.importable_reference.statement }}
{% if loop.last %}
{% endif -%}
{% endfor -%}
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    g = parser.add_argument_group("{{ name }}")
    g.add_argument(
        "--config-file",
        dest="config_file",
        required=True,
        type=argparse.FileType(mode="r"),
    )
    args = parser.parse_args()
    params = yaml.safe_load(args.config_file)
    # FIXME: first pass assumes tasks are already in topological order
    {% for t in tasks %}
    {{ t.known_task.importable_reference.function }}_return = {{ t.known_task.importable_reference.function }}.replace(validate=True)(
    {%- if t.arg_dependencies %}
        {% for arg in t.arg_dependencies %}{{ arg }}={{ t.arg_dependencies[arg] }},{% endfor %}
        **params["{{ t.known_task_name }}"],
    )
    {% else %}**params["{{ t.known_task_name }}"],
    )
    {% endif -%}
    {% endfor -%}
